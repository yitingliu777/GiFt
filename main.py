import os
import time
import sys
import numpy as np
from scipy.sparse import csc_matrix, lil_matrix, save_npz, load_npz, csgraph, linalg, identity, coo_matrix
import utils.util as util

sys.path.append(os.getcwd())
from utils.mix_frequency_filter import GiFt
import matplotlib.pyplot as plt
import csv

os.environ["KMP_DUPLICATE_LIB_OK"] = "TRUE"


def plot_pos(pos, fixp):
    # fixed node are placed at predetermined locations
    plt.scatter(pos[:, 0], pos[:, 1], color='lightsteelblue', label='Movable cell')
    plt.scatter(fixp[:, 0], fixp[:, 1], color='indianred', label='Fixed cell', marker='s')
    plt.legend(prop={'size': 15})
    plt.tick_params(labelsize=13)
    fig = plt.gcf()
    # fig.savefig('gift_location.png', format='png', pad_inches=0)
    plt.show()


def plot_pos2(pos, fixp):
    # fixed cells are placed at their predicted locations
    plt.scatter(pos[:, 0], pos[:, 1], color='b')
    plt.scatter(pos[-len(fixp):, 0], pos[-len(fixp):, 1], color='r')
    plt.show()


def write_positions_to_def(defFile, position, saveFile, saveName):
    read_file = open(defFile, 'r')
    save_file = open(saveFile + saveName + '.def', 'w')
    flag = 0
    for line in read_file.readlines():
        if line.find('UNPLACED') != -1:
            line = line.replace('UNPLACED',
                                'PLACED ( ' + str(int(position[flag][0])) + ' ' + str(int(position[flag][1])) + ' ) N',
                                1)

            save_file.write(line)
            flag += 1
        else:
            save_file.write(line)
    save_file.close()


def deflef_main(benchmark_list):
    for benchmark_name in benchmark_list:
        print('-----------', benchmark_name, '----------------')
        adj_npz = load_npz('data/ispd2014_parser/' + benchmark_name + '/forQua_conn.npz')
        adj = csc_matrix(adj_npz)

        # -----------------Read the locations of fixed cells and the number of movable cells ------------------------#
        ori_def_file = 'data/ispd2014/' + benchmark_name + '/floorplan.def'
        def_file = 'data/ispd2014/' + benchmark_name + '/mfloorplan.def'
        movable_num, fixed_num, fixed_point_ID, fixed_cell_location = util.find_fixed_point_def(
            def_file)  # Find the fixed cells and their locations
        print('movable cell num: ', movable_num, 'fixed cell num: ', fixed_num)

        # --------------------Generate the locations of movable cells ------------------------#
        scale = 0.5  # The distribution range of the initial locations generated by GiFt (customizable)
        random_initial = util.generate_initial_locations(fixed_cell_location, movable_num, scale)
        random_initial = np.concatenate((random_initial, fixed_cell_location), 0)

        # ----------- low-pass filter ------------------------#
        start = time.time()
        low_pass_filter = GiFt(adj)
        low_pass_filter.train(4)
        location_low = low_pass_filter.get_cell_position(4, random_initial)
        print('finish low-pass filter!')

        # ----------- m-pass filter ------------------------#
        low_pass_filter.train(4)
        location_m = low_pass_filter.get_cell_position(2, random_initial)
        print('finish m-pass filter!')

        # ----------- h-pass filter ------------------------#
        low_pass_filter.train(2)
        location_h = low_pass_filter.get_cell_position(2, random_initial)
        print('finish h-pass filter!')
        end = time.time()
        print('-------------total time--------', end - start)

        # ------------ final location  ------------------------#
        location = 0.2 * location_low + 0.7 * location_m + 0.1 * location_h
        # location = location_m

        # ---------------- plot ------------------------#
        plot_pos(location, fixed_cell_location)

        # ------------------write def file ------------------------#
        save_path = 'data/ispd2014_parser/filter_result_iccad/' + benchmark_name + '/'
        save_name = 'gift'
        util.make_dir(save_path)
        write_positions_to_def(ori_def_file, location[:movable_num, :],
                               save_path, save_name)


if __name__ == '__main__':
    benchmark_name_list_ispd2014 = ['mgc_pci_bridge32_1', 'mgc_pci_bridge32_2', 'mgc_matrix_mult', 'mgc_fft',
                                    'mgc_des_perf_1', 'mgc_des_perf_2', 'mgc_edit_dist_1', 'mgc_edit_dist_2', ]
    deflef_main(benchmark_name_list_ispd2014)
